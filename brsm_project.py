# -*- coding: utf-8 -*-
"""BRSM project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZNRkrKcmtEIr1Jp6HvN1qq2kGt_kWEkb

## Experiment 1
"""

from scipy import stats
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

data = pd.read_excel("exp1.xlsx")
print(data)

len(data.rid.unique())

"""## Analysis based on age group"""

arr = np.array(data.age.unique())
arr.sort()
print(arr)

age_gr1 = data.loc[(data['age'] >= 16) & (data['age'] <= 28)]
age_gr2 = data.loc[(data['age'] >= 29) & (data['age'] <= 39)]
age_gr3 = data.loc[(data['age'] >= 40)]

age_gr1

print(len(age_gr1.rid.unique()))

age_gr2

print(len(age_gr2.rid.unique()))

age_gr3

print(len(age_gr3.rid.unique()))

emo = data.emotion.unique()
temp = data.temp_cat.unique()
avg1 = pd.DataFrame()
arr_a1 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = age_gr1.loc[(age_gr1['emotion'] == str(e)) & (age_gr1['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_a1[cnt][0] = a1
    e2 = age_gr1.loc[(age_gr1['emotion'] == str(e)) & (age_gr1['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_a1[cnt][1] = a2
    e3 = age_gr1.loc[(age_gr1['emotion'] == str(e)) & (age_gr1['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_a1[cnt][2] = a3
    e4 = age_gr1.loc[(age_gr1['emotion'] == str(e)) & (age_gr1['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_a1[cnt][3] = a4
    e5 = age_gr1.loc[(age_gr1['emotion'] == str(e)) & (age_gr1['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_a1[cnt][4] = a5
    avg1 = avg1.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

avg1

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
df1 = pd.DataFrame([arr_a1[0],arr_a1[1],arr_a1[2],arr_a1[3],arr_a1[4],arr_a1[5],arr_a1[6],arr_a1[7],arr_a1[8],arr_a1[9],arr_a1[10],arr_a1[11]],
                   columns = cols, index = idx)
sns.heatmap(df1, cmap ='Blues', linewidths = 0.10, annot = True)

emo = data.emotion.unique()
temp = data.temp_cat.unique()
avg2 = pd.DataFrame()
arr_a2 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = age_gr2.loc[(age_gr2['emotion'] == str(e)) & (age_gr2['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_a2[cnt][0] = a1
    e2 = age_gr2.loc[(age_gr2['emotion'] == str(e)) & (age_gr2['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_a2[cnt][1] = a2
    e3 = age_gr2.loc[(age_gr2['emotion'] == str(e)) & (age_gr2['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_a2[cnt][2] = a3
    e4 = age_gr2.loc[(age_gr2['emotion'] == str(e)) & (age_gr2['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_a2[cnt][3] = a4
    e5 = age_gr2.loc[(age_gr2['emotion'] == str(e)) & (age_gr2['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_a2[cnt][4] = a5
    avg2 = avg2.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

avg2

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
df2 = pd.DataFrame([arr_a2[0],arr_a2[1],arr_a2[2],arr_a2[3],arr_a2[4],arr_a2[5],arr_a2[6],arr_a2[7],arr_a2[8],arr_a2[9],arr_a2[10],arr_a2[11]],
                   columns = cols, index = idx)
sns.heatmap(df2, cmap ='Blues', linewidths = 0.10, annot = True)

emo = data.emotion.unique()
temp = data.temp_cat.unique()
avg3 = pd.DataFrame()
arr_a3 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = age_gr3.loc[(age_gr3['emotion'] == str(e)) & (age_gr3['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_a3[cnt][0] = a1
    e2 = age_gr3.loc[(age_gr3['emotion'] == str(e)) & (age_gr3['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_a3[cnt][1] = a2
    e3 = age_gr3.loc[(age_gr3['emotion'] == str(e)) & (age_gr3['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_a3[cnt][2] = a3
    e4 = age_gr3.loc[(age_gr3['emotion'] == str(e)) & (age_gr3['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_a3[cnt][3] = a4
    e5 = age_gr3.loc[(age_gr3['emotion'] == str(e)) & (age_gr3['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_a3[cnt][4] = a5
    avg3 = avg3.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

avg3

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
df3 = pd.DataFrame([arr_a3[0],arr_a3[1],arr_a3[2],arr_a3[3],arr_a3[4],arr_a3[5],arr_a3[6],arr_a3[7],arr_a3[8],arr_a3[9],arr_a3[10],arr_a3[11]],
                   columns = cols, index = idx)
sns.heatmap(df3, cmap ='Blues', linewidths = 0.10, annot = True)

F, p = stats.f_oneway(age_gr1['response'],age_gr2['response'],age_gr3['response'])
print('F-Statistic=%.3f, p=%.3f' % (F, p))

for e in emo:
    e1 = age_gr1.loc[(age_gr1['emotion'] == str(e))]
    e2 = age_gr2.loc[(age_gr2['emotion'] == str(e))]
    e3 = age_gr3.loc[(age_gr3['emotion'] == str(e))]
    
    F, p = stats.f_oneway(e1['response'],e2['response'],e3['response'])
    
    print(e,': F-Statistic=%.3f, p=%.3f' % (F, p))

emo = data.emotion.unique()
temp = data.temp_cat.unique()
a1 = pd.DataFrame()
arr_a1 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = data.loc[(data['emotion'] == str(e))]
    for i in range(len(e1['response'])):
        if ((e1.iloc[i]['age'] >= 16) & (e1.iloc[i]['age'] <= 28)):
            a1 = a1.append({'emotion':str(e), 'age':1, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)
        elif ((e1.iloc[i]['age'] >= 29) & (e1.iloc[i]['age'] <= 39)):
            a1 = a1.append({'emotion':str(e), 'age':2, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)
        elif ((e1.iloc[i]['age'] >= 40)):
            a1 = a1.append({'emotion':str(e), 'age':3, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)

a1

!pip install numpy_indexed

!pip install hypothetical

import numpy_indexed as npi
from statsmodels.stats.libqsturng import qsturng, psturng
from hypothetical.descriptive import var
from itertools import combinations

alpha = 0.05
k = len(a1.age.unique())

group_means = dict(npi.group_by(a1['age'], a1['response'], np.mean))
group_obs = dict(npi.group_by(a1['age'], a1['response'], len))
group_variance = dict(npi.group_by(a1['age'], a1['response'], var))

combs = list(combinations(a1.age.unique(), 2))
combs

group_comps = []
mean_differences = []
degrees_freedom = []
t_values = []
p_values = []
std_err = []
up_conf = []
low_conf = []

for comb in combs:
    diff = group_means[comb[1]] - group_means[comb[0]]
    
    t_val = np.abs(diff) / np.sqrt((group_variance[comb[0]] / group_obs[comb[0]]) + 
                                   (group_variance[comb[1]] / group_obs[comb[1]]))
    
    df_num = (group_variance[comb[0]] / group_obs[comb[0]] + group_variance[comb[1]] / group_obs[comb[1]]) ** 2
    
    df_denom = ((group_variance[comb[0]] / group_obs[comb[0]]) ** 2 / (group_obs[comb[0]] - 1) +
                (group_variance[comb[1]] / group_obs[comb[1]]) ** 2 / (group_obs[comb[1]] - 1))
    
    df = df_num / df_denom
    
    p_val = psturng(t_val * np.sqrt(2), k, df)

    se = np.sqrt(0.5 * (group_variance[comb[0]] / group_obs[comb[0]] + 
                        group_variance[comb[1]] / group_obs[comb[1]]))
    
    upper_conf = diff + qsturng(1 - alpha, k, df)
    lower_conf = diff - qsturng(1 - alpha, k, df)
    
    mean_differences.append(diff)
    degrees_freedom.append(df)
    t_values.append(t_val)
    p_values.append(p_val)
    std_err.append(se)
    up_conf.append(upper_conf)
    low_conf.append(lower_conf)
    group_comps.append(str(comb[0]) + ' : ' + str(comb[1]))

result_df = pd.DataFrame({'groups': group_comps,
                          'mean_difference': mean_differences,
                          'std_error': std_err,
                          't_value': t_values,
                          'p_value': p_values,
                          'upper_limit': up_conf,
                          'lower limit': low_conf})

result_df

barWidth = 0.25
fig = plt.subplots(figsize =(10, 4))


for i in range(12):
    
    p1 = [avg1.iloc[i]['temp0'], avg1.iloc[i]['temp10'], avg1.iloc[i]['temp20'], avg1.iloc[i]['temp30'], avg1.iloc[i]['temp40']]
    p2 = [avg2.iloc[i]['temp0'], avg2.iloc[i]['temp10'], avg2.iloc[i]['temp20'], avg2.iloc[i]['temp30'], avg2.iloc[i]['temp40']]
    p3 = [avg3.iloc[i]['temp0'], avg3.iloc[i]['temp10'], avg3.iloc[i]['temp20'], avg3.iloc[i]['temp30'], avg3.iloc[i]['temp40']]

    br1 = np.arange(len(p1))
    br2 = [x + barWidth for x in br1]
    br3 = [x + barWidth for x in br2]

    plt.bar(br1, p1, color ='red', width = barWidth, edgecolor ='grey', label ='16-28 years')
    
    plt.plot(br1,p1, '-',  color ='red')
    plt.legend()

    plt.bar(br2, p2, color ='orange', width = barWidth, edgecolor ='grey', label ='29-39 years')
    
    plt.plot(br2,p2, '-',  color ='orange')
    plt.legend()

    plt.bar(br3, p3, color ='y', width = barWidth, edgecolor ='grey', label ='40-78 years')
    
    plt.plot(br3,p3, '-',  color ='y')

    plt.xlabel('Temperature')
    plt.ylabel('Response')
    plt.xticks([r + barWidth for r in range(len(p1))],['temp0', 'temp10', 'temp20', 'temp30', 'temp40'])
    
    plt.title(avg1.iloc[i]['emotion'])

    plt.legend()
    plt.show()

import statsmodels.api as sm
from statsmodels.formula.api import ols
  
model = ols('response ~ temp + age + temp:age', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)

model = ols('response ~ emotion + age + emotion:age', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)

model = ols('response ~ temp + emotion + temp:emotion', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)

"""## Analysis based on the gender factor"""

female = data.loc[(data['gender'] == 'Female')]
male = data.loc[(data['gender'] == 'Male')]

len(male.rid.unique())

len(female.rid.unique())

emo = data.emotion.unique()
temp = data.temp_cat.unique()
fe_avg = pd.DataFrame()
arr_fe = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = female.loc[(female['emotion'] == str(e)) & (female['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_fe[cnt][0] = a1
    e2 = female.loc[(female['emotion'] == str(e)) & (female['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_fe[cnt][1] = a2
    e3 = female.loc[(female['emotion'] == str(e)) & (female['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_fe[cnt][2] = a3
    e4 = female.loc[(female['emotion'] == str(e)) & (female['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_fe[cnt][3] = a4
    e5 = female.loc[(female['emotion'] == str(e)) & (female['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_fe[cnt][4] = a5
    fe_avg = fe_avg.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

fe_avg

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
fe_df = pd.DataFrame([arr_fe[0],arr_fe[1],arr_fe[2],arr_fe[3],arr_fe[4],arr_fe[5],arr_fe[6],arr_fe[7],arr_fe[8],arr_fe[9],arr_fe[10],arr_fe[11]],
                   columns = cols, index = idx)
# sns.color_palette("Greens")
sns.heatmap(fe_df, cmap="PiYG", linewidths = 0.10, annot = True)

emo = data.emotion.unique()
temp = data.temp_cat.unique()
ma_avg = pd.DataFrame()
arr_ma = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = male.loc[(male['emotion'] == str(e)) & (male['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_ma[cnt][0] = a1
    e2 = male.loc[(male['emotion'] == str(e)) & (male['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_ma[cnt][1] = a2
    e3 = male.loc[(male['emotion'] == str(e)) & (male['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_ma[cnt][2] = a3
    e4 = male.loc[(male['emotion'] == str(e)) & (male['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_ma[cnt][3] = a4
    e5 = male.loc[(male['emotion'] == str(e)) & (male['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_ma[cnt][4] = a5
    ma_avg = ma_avg.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

ma_avg

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
ma_df = pd.DataFrame([arr_ma[0],arr_ma[1],arr_ma[2],arr_ma[3],arr_ma[4],arr_ma[5],arr_ma[6],arr_ma[7],arr_ma[8],arr_ma[9],arr_ma[10],arr_ma[11]],
                   columns = cols, index = idx)
# sns.color_palette("Greens")
sns.heatmap(ma_df, cmap="PiYG", linewidths = 0.10, annot = True)

barWidth = 0.25
fig = plt.subplots(figsize =(10, 4))

for i in range(12):
    ml = [ma_avg.iloc[i]['temp0'], ma_avg.iloc[i]['temp10'], ma_avg.iloc[i]['temp20'], ma_avg.iloc[i]['temp30'], ma_avg.iloc[i]['temp40']]
    fe = [fe_avg.iloc[i]['temp0'], fe_avg.iloc[i]['temp10'], fe_avg.iloc[i]['temp20'], fe_avg.iloc[i]['temp30'], fe_avg.iloc[i]['temp40']]

    br1 = np.arange(len(ml))
    br2 = [x + barWidth for x in br1]

    plt.bar(br1, ml, color ='red', width = barWidth, edgecolor ='grey', label ='Male')
    plt.plot(br1,ml, '-',  color ='red')
    plt.bar(br2, fe, color ='orange', width = barWidth, edgecolor ='grey', label ='Female')
    plt.plot(br2,fe, '-', color = 'orange')

    plt.xlabel('Temperature')
    plt.ylabel('Response')
    plt.xticks([r + barWidth for r in range(len(ml))],['temp0', 'temp10', 'temp20', 'temp30', 'temp40'])
    
    plt.title(ma_avg.iloc[i]['emotion'])

    plt.legend()
    plt.show()

from scipy.stats import mannwhitneyu

stat, p_value = mannwhitneyu(female['response'], male['response'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

from scipy import stats as st
a = female['response']
b = male['response']
st.ttest_ind(a=a, b=b, equal_var=True)

for e in emo:
    e1 = female.loc[(female['emotion'] == str(e))]
    e2 = male.loc[(male['emotion'] == str(e))]

    #print(e, " female")
    #print(e1)
    #print(e, "male")
    #print(e2)
    
    # a = e1['response']
    # b = e2['response']
    # F, p = st.ttest_ind(a=a, b=b, equal_var=True)

    F, p = mannwhitneyu(e1['response'], e2['response'])
    
    print(e,': F-Statistic=%.3f, p=%.3f' % (F, p))

emo = data.emotion.unique()
temp = data.temp_cat.unique()
a1 = pd.DataFrame()
arr_a1 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = data.loc[(data['emotion'] == str(e))]
    for i in range(len(e1['response'])):
        if ((e1.iloc[i]['gender'] == 'Female')):
            a1 = a1.append({'emotion':str(e), 'gender':1, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)
        else:
            a1 = a1.append({'emotion':str(e), 'gender':0, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)

a1

model = ols('response ~ temp + gender + temp:gender', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)

model = ols('response ~ emotion + gender + emotion:gender', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)

"""## Analysis based on the country of residence"""

arr = np.array(data.country.unique())
arr.sort()
print(arr)

data['country'] = data['country'].replace(['canada'],'Canada')
data['country'] = data['country'].replace(['Costa rica'],'Costa Rica')

arr = np.array(data.country.unique())
arr.sort()
print(arr)

gr1 = ['Australia', 'Bolivia', 'Colombia','Chile', 'China','Costa Rica', 'Guatemala', 'Honduras', 'Italy', 'Japan', 'Mexico', 'New Zealand', 'Peru', 'Spain', 'Taiwan']
gr2 = ['Denmark', 'Estonia', 'France', 'Germany', 'Ireland', 'Norway', 'Switzerland', 'United Kingdom', 'United States']

g1 = data[data.country.isin(gr1)]

g2 = data[data.country.isin(gr2)]

len(g1.rid.unique())

len(g2.rid.unique())

emo = data.emotion.unique()
temp = data.temp_cat.unique()
g1_avg = pd.DataFrame()
arr_g1 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = g1.loc[(g1['emotion'] == str(e)) & (g1['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_g1[cnt][0] = a1
    e2 = g1.loc[(g1['emotion'] == str(e)) & (g1['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_g1[cnt][1] = a2
    e3 = g1.loc[(g1['emotion'] == str(e)) & (g1['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_g1[cnt][2] = a3
    e4 = g1.loc[(g1['emotion'] == str(e)) & (g1['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_g1[cnt][3] = a4
    e5 = g1.loc[(g1['emotion'] == str(e)) & (g1['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_g1[cnt][4] = a5
    g1_avg = g1_avg.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

g1_avg

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
g1_df = pd.DataFrame([arr_g1[0],arr_g1[1],arr_g1[2],arr_g1[3],arr_g1[4],arr_g1[5],arr_g1[6],arr_g1[7],arr_g1[8],arr_g1[9],arr_g1[10],arr_g1[11]],
                   columns = cols, index = idx)
# sns.color_palette("Greens")
sns.heatmap(g1_df, cmap="PuBu", linewidths = 0.10, annot = True)

emo = data.emotion.unique()
temp = data.temp_cat.unique()
g2_avg = pd.DataFrame()
arr_g2 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = g2.loc[(g2['emotion'] == str(e)) & (g2['temp_cat'] == 'temp0')]
    a1 = e1['response'].mean()
    arr_g2[cnt][0] = a1
    e2 = g2.loc[(g2['emotion'] == str(e)) & (g2['temp_cat'] == 'temp10')]
    a2 = e2['response'].mean()
    arr_g2[cnt][1] = a2
    e3 = g2.loc[(g2['emotion'] == str(e)) & (g2['temp_cat'] == 'temp20')]
    a3 = e3['response'].mean()
    arr_g2[cnt][2] = a3
    e4 = g2.loc[(g2['emotion'] == str(e)) & (g2['temp_cat'] == 'temp30')]
    a4 = e4['response'].mean()
    arr_g2[cnt][3] = a4
    e5 = g2.loc[(g2['emotion'] == str(e)) & (g2['temp_cat'] == 'temp40')]
    a5 = e5['response'].mean()
    arr_g2[cnt][4] = a5
    g2_avg = g2_avg.append({'emotion':str(e), 'temp0':a1, 'temp10':a2, 'temp20':a3, 'temp30':a4, 'temp40':a5},ignore_index = True)
    cnt += 1

g2_avg

fig, ax = plt.subplots(figsize = (12, 7))
idx = ['0','1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
cols = list('ABCDE')
g2_df = pd.DataFrame([arr_g2[0],arr_g2[1],arr_g2[2],arr_g2[3],arr_g2[4],arr_g2[5],arr_g2[6],arr_g2[7],arr_g2[8],arr_g2[9],arr_g2[10],arr_g2[11]],
                   columns = cols, index = idx)
# sns.color_palette("Greens")
sns.heatmap(g2_df, cmap="PuBu", linewidths = 0.10, annot = True)

barWidth = 0.25
fig = plt.subplots(figsize =(10, 4))

for i in range(12):
    hot = [g1_avg.iloc[i]['temp0'], g1_avg.iloc[i]['temp10'], g1_avg.iloc[i]['temp20'], g1_avg.iloc[i]['temp30'], g1_avg.iloc[i]['temp40']]
    col = [g2_avg.iloc[i]['temp0'], g2_avg.iloc[i]['temp10'], g2_avg.iloc[i]['temp20'], g2_avg.iloc[i]['temp30'], g2_avg.iloc[i]['temp40']]

    br1 = np.arange(len(col))
    br2 = [x + barWidth for x in br1]

    plt.bar(br1, hot, color ='red', width = barWidth, edgecolor ='grey', label ='YAT>13')
    plt.plot(br1,hot, '-',  color ='red')
    plt.bar(br2, col, color ='blue', width = barWidth, edgecolor ='grey', label ='YAT<13')
    plt.plot(br2,col, '-',  color ='blue')

    plt.xlabel('Temperature')
    plt.ylabel('Response')
    plt.xticks([r + barWidth for r in range(len(col))],['temp0', 'temp10', 'temp20', 'temp30', 'temp40'])
    
    plt.title(g1_avg.iloc[i]['emotion'])

    plt.legend()
    plt.show()

from scipy.stats import mannwhitneyu

stat, p_value = mannwhitneyu(g1['response'], g2['response'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

from scipy import stats as st
a = g1['response']
b = g2['response']
st.ttest_ind(a=a, b=b, equal_var=True)

for e in emo:
    e1 = g1.loc[(g1['emotion'] == str(e))]
    e2 = g2.loc[(g2['emotion'] == str(e))]
    
    # a = e1['response']
    # b = e2['response']
    # F, p = st.ttest_ind(a=a, b=b, equal_var=True)

    F, p = mannwhitneyu(e1['response'], e2['response'])
    
    print(e,': F-Statistic=%.3f, p=%.3f' % (F, p))

emo = data.emotion.unique()
temp = data.temp_cat.unique()
a1 = pd.DataFrame()
arr_a1 = np.zeros((12,5))
cnt = 0
for e in emo:
    e1 = data.loc[(data['emotion'] == str(e))]
    for i in range(len(e1['response'])):
        if e1.iloc[i]['country'] in gr1:
            a1 = a1.append({'emotion':str(e), 'country':1, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)
        else:
            a1 = a1.append({'emotion':str(e), 'country':2, 'temp':e1.iloc[i]['temp_cat'], 'response':e1.iloc[i]['response']},ignore_index = True)

a1

model = ols('response ~ temp + country + temp:country', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)

model = ols('response ~ emotion + country + emotion:country', data = a1).fit()
result = sm.stats.anova_lm(model, type=2)

print(result)



"""# Experiment 2"""

val = pd.read_csv("exp2.csv", 'demo valence')

val

"""### Ananlysis based on Genderwise grouping for valence"""

female = val.loc[(val['gender'] == 'Female')]
male = val.loc[(val['gender'] == 'Male')]

len(male)

len(female)

stat, p_value = mannwhitneyu(female['rt'], male['rt'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# hit rates and false alarm rates
fe_tot = len(female)
hitP = len(female.loc[(female['correct'] == 1)])/fe_tot
faP  = len(female.loc[(female['correct'] == 0)])/fe_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
fe_dPrime = hitZ-faZ

print(fe_dPrime)

# hit rates and false alarm rates
ma_tot = len(male)
hitP = len(male.loc[(male['correct'] == 1)])/ma_tot
faP  = len(male.loc[(male['correct'] == 0)])/ma_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
ma_dPrime = hitZ-faZ

print(ma_dPrime)

plt.title('Female reaction time')
plt.hist(female['rt'], edgecolor="black")
plt.show()

fe_rt, fe_rt_lmbd = stats.boxcox(female['rt'])
plt.title('Normalised Female rt')
plt.hist(fe_rt, edgecolor="black")
plt.show()

plt.title('Male reaction time')
plt.hist(male['rt'], edgecolor="black")
plt.show()

ma_rt, ma_rt_lmbd = stats.boxcox(male['rt'])
plt.title('Normalised Male rt')
plt.hist(ma_rt, edgecolor="black")
plt.show()

a = fe_rt
b = ma_rt
st.ttest_ind(a=a, b=b, equal_var=True)

from scipy.stats import mannwhitneyu

stat, p_value = mannwhitneyu(female['rt'], male['rt'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

stat, p_value = mannwhitneyu(female['correct'], male['correct'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

aro = pd.read_excel("exp1.xlsx", 'demo arousal')

aro

"""### Ananlysis based on Genderwise grouping for arousal"""

female = aro.loc[(aro['gender'] == 'Female')]
male = aro.loc[(aro['gender'] == 'Male')]

len(male)

len(female)

stat, p_value = mannwhitneyu(female['rt'], male['rt'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# hit rates and false alarm rates
fe_tot = len(female)
hitP = len(female.loc[(female['correct'] == 1)])/fe_tot
faP  = len(female.loc[(female['correct'] == 0)])/fe_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
fe_dPrime = hitZ-faZ

print(fe_dPrime)

# hit rates and false alarm rates
ma_tot = len(male)
hitP = len(male.loc[(male['correct'] == 1)])/ma_tot - 0.001
faP  = len(male.loc[(male['correct'] == 0)])/ma_tot + 0.001

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
ma_dPrime = hitZ-faZ

print(ma_dPrime)

"""### Age groupwise division for Valence"""

arr = np.array(val.age.unique())
arr.sort()
print(arr)

age_gr1 = val.loc[(val['age'] >= 18) & (val['age'] <= 28)]
age_gr2 = val.loc[(val['age'] >= 29)]

len(age_gr1)

len(age_gr2)

stat, p_value = mannwhitneyu(age_gr1['rt'], age_gr2['rt'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# hit rates and false alarm rates
a1_tot = len(age_gr1)
hitP = len(age_gr1.loc[(age_gr1['correct'] == 1)])/a1_tot
faP  = len(age_gr1.loc[(age_gr1['correct'] == 0)])/a1_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
a1_dPrime = hitZ-faZ

print(a1_dPrime)

# hit rates and false alarm rates
a2_tot = len(age_gr2)
hitP = len(age_gr2.loc[(age_gr2['correct'] == 1)])/a2_tot
faP  = len(age_gr2.loc[(age_gr2['correct'] == 0)])/a2_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
a2_dPrime = hitZ-faZ

print(a2_dPrime)

"""### Age groupwise division for arousal"""

arr = np.array(aro.age.unique())
arr.sort()
print(arr)

age_gr1 = aro.loc[(aro['age'] >= 18) & (aro['age'] <= 28)]
age_gr2 = aro.loc[(aro['age'] >= 29)]

len(age_gr1)

len(age_gr2)

stat, p_value = mannwhitneyu(age_gr1['rt'], age_gr2['rt'])
print('Statistics=%.2f, p=%.2f' % (stat, p_value))

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# hit rates and false alarm rates
a1_tot = len(age_gr1)
hitP = len(age_gr1.loc[(age_gr1['correct'] == 1)])/a1_tot
faP  = len(age_gr1.loc[(age_gr1['correct'] == 0)])/a1_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
a1_dPrime = hitZ-faZ

print(a1_dPrime)

# hit rates and false alarm rates
a2_tot = len(age_gr2)
hitP = len(age_gr2.loc[(age_gr2['correct'] == 1)])/a2_tot
faP  = len(age_gr2.loc[(age_gr2['correct'] == 0)])/a2_tot

# z-scores
hitZ = stats.norm.ppf(hitP)
faZ  = stats.norm.ppf(faP)

# d-prime
a2_dPrime = hitZ-faZ

print(a2_dPrime)

"""### Accuracy and Error rate boxplots"""

from scipy import stats
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

data = pd.read_csv("iatdata_demo_valence.csv")
print(data)

val_cong = data.loc[(data['congruency'] == "congruent")]
val_incong = data.loc[(data['congruency'] == "incongruent")]

print(len(val_cong))

val_incong

from pandas._libs.lib import is_float_array
print(len(val_incong))

sum=0
cnt=0

for i in range(len(val_cong)):
  if(val_cong.iloc[i]['correct']==1):
    cnt+=1
    sum+=val_cong.iloc[i]['rt']

temp = sum/cnt

print(temp)

a1=[]
for i in range(len(val_cong)):
  if(val_cong.iloc[i]['correct']==0):
    a1.append(temp)
  else:
    a1.append(val_cong.iloc[i]['rt'])
a1

sum1=0
cnt1=0

for i in range(len(val_incong)):
  if(val_incong.iloc[i]['correct']==1):
    cnt1+=1
    sum1+=val_incong.iloc[i]['rt']

temp1 = sum1/cnt1

print(temp1)

a2=[]
for i in range(len(val_incong)):
  if(val_incong.iloc[i]['correct']==0):
    a2.append(temp1)
  else:
    a2.append(val_incong.iloc[i]['rt'])
a2

fig = plt.figure(figsize =(10, 7))
plt.title("Valence Reaction Times")
plt.ylabel("Reaction time")
plt.xlabel("Congruent and Incongruent")
plt.boxplot([a1,a2])
plt.show()

print(np.median(a1))
print(np.median(a2))

datab = pd.read_csv("iatdata_demo_arousal.csv")
print(datab)

ar_cong = datab.loc[(datab['congruency'] == "congruent")]
ar_incong = datab.loc[(datab['congruency'] == "incongruent")]

ar_cong = datab.loc[(datab['congruency'] == "congruent")]
ar_incong = datab.loc[(datab['congruency'] == "incongruent")]

ar_cong

print(len(ar_cong))

ar_incong

print(len(ar_incong))

sum=0
cnt=0

for i in range(len(ar_cong)):
  if(ar_cong.iloc[i]['correct']==1):
    cnt+=1
    sum+=ar_cong.iloc[i]['rt']

temp = sum/cnt

print(temp)

b1=[]
for i in range(len(ar_cong)):
  if(ar_cong.iloc[i]['correct']==0):
    b1.append(temp)
  else:
    b1.append(ar_cong.iloc[i]['rt'])
b1

sum1=0
cnt1=0

for i in range(len(ar_incong)):
  if(ar_incong.iloc[i]['correct']==1):
    cnt1+=1
    sum1+=ar_incong.iloc[i]['rt']

temp1 = sum1/cnt1

print(temp1)

b2=[]
for i in range(len(ar_incong)):
  if(ar_incong.iloc[i]['correct']==0):
    b2.append(temp1)
  else:
    b2.append(ar_incong.iloc[i]['rt'])
b2

fig = plt.figure(figsize =(10, 7))
plt.title("Arousal Reaction Times")
plt.ylabel("Reaction time")
plt.xlabel("Congruent and Incongruent")
plt.boxplot([b1,b2])
plt.show()

print(np.median(b1))
print(np.median(b2))